# Calculate sum and put it on screen

.DATA

VIDEO: 16384

# The program sums and displays all the values in the array
ARRAY: 0 1 2 3 4 5 6 7 8 9 10 100 2001
AEND:

# Counter for decimal numbers stored
CNT: 0
# Storage for decimal numbers
TMP: 0 0 0 0

.TEXT
START:

# First we calculate the length of the input

LUI  R1 ARRAY
ADDI R1 R1 ARRAY
ADD  R3 R0 R1
LUI  R2 AEND
ADDI R2 R2 AEND
NAND R3 R3 R3       # Subtract R3 from R2:
ADDI R3 R3 1        # R2 - R3 =
ADD  R3 R3 R2       #           R2 + (~R3 + 1)

                    # R1: Address, R3: Length

ADD  R2 R0 R0       # Current iteration
ADD  R4 R0 R0       # Contains sum
LOOP:
BEQ  R2 R3 OUT
LW   R5 R1 0        # Load the next value
ADD  R4 R4 R5

ADDI R2 R2 1
ADDI R1 R1 1

LUI  R5 LOOP
ADDI R5 R5 LOOP
JALR R0 R5

OUT:                # Put R4 on the screen
                    # R4 is 16 bit, we have 4x4bit 4-segment display
                    # So the display  range is      0 - 9999
                    #    the register range is      0 - 65535
                    #                       or -32768 - 32767
                    # We are going to put lower decimals only


LUI  R1 CNT         # Check CNT for end value
ADDI R1 R1 CNT
LW   R2 R1 0

ADDI R3 R0 4        # Iterations
BEQ  R3 R2 OEND

ADD  R2 R4 R0       # Load R4
LUI  R3 DIV10       # Call R4 DIV 10
ADDI R3 R3 DIV10
JALR R1 R3

ADD  R4 R6 R0

LUI  R5 CNT         # Store value
ADDI R5 R5 CNT
LW   R2 R5 0
LUI  R1 TMP         # Check CNT for end value
ADDI R1 R1 TMP
ADD  R1 R1 R2
SW   R7 R1 0
ADDI R2 R2 1
SW   R2 R5 0

LUI  R1 OUT
ADDI R1 R1 OUT
JALR R0 R1

OEND:
                      # Show saved values on the screen
LUI  R1 VIDEO
ADDI R1 R1 VIDEO
LW   R2 R1 0

LUI  R3 TMP
ADDI R3 R3 TMP
LW   R5 R3 0
LW   R4 R3 1
                      # Load first value to 8 MSB of the register
                      # Then shift it left eight times
                      # It is safe to add the second one
                      # As the value will never pass 9
ADD  R4 R4 R4
ADD  R4 R4 R4
ADD  R4 R4 R4
ADD  R4 R4 R4
ADD  R4 R4 R4
ADD  R4 R4 R4
ADD  R4 R4 R4
ADD  R4 R4 R4
ADD  R4 R4 R5

SW   R4 R2 1

LW   R5 R3 2
LW   R4 R3 3

ADD  R4 R4 R4
ADD  R4 R4 R4
ADD  R4 R4 R4
ADD  R4 R4 R4
ADD  R4 R4 R4
ADD  R4 R4 R4
ADD  R4 R4 R4
ADD  R4 R4 R4
ADD  R4 R4 R5

SW   R4 R2 0

LUI  R1 END
ADDI R1 R1 END
JALR R0 R1

                      # Subprogram implementing division
  DIV10:              # Assumption is R1 is the return address, R2 value

  ADD  R6 R0 R0       # Result
  ADD  R7 R2 R0       # Remainder

                      # The program uses quite advanced way for division
                      # We will not explain it here, but it can be reused
                      # There are two instructions with 10 as immediate
                      # Replacing it will allow other dividers
  DLOOP:
  ADDI R3 R0 10       # Check if remainder is bigger or equal to 10
  ADD  R4 R0 R7
  NAND R3 R3 R3
  ADDI R3 R3 1
  ADD  R4 R3 R4       # If R4 is negative, we are done
  LUI  R3 512
  NAND R4 R3 R4
  NAND R4 R4 R4
  BEQ  R3 R4 EXIT10   # We exit on negative value

  ADDI R3 R0 1
  ADDI R4 R0 10

  DMLOOP:
  ADD  R5 R4 R4
  ADD  R2 R0 R7
  NAND R2 R2 R2
  ADDI R2 R2 1
  ADD  R2 R5 R2       # If R2 is positive, we are done
  LUI  R5 512
  NAND R2 R5 R2
  NAND R2 R2 R2
  BEQ  R2 R0 DMEND

  ADD  R4 R4 R4
  ADD  R3 R3 R3

  LUI  R5 DMLOOP
  ADDI R5 R5 DMLOOP
  JALR R0 R5

  DMEND:

  ADD  R6 R6 R3

  NAND R4 R4 R4
  ADDI R4 R4 1
  ADD  R7 R7 R4

  LUI  R2 DLOOP
  ADDI R2 R2 DLOOP
  JALR R0 R2

  EXIT10:
  JALR R0 R1          # Return from the subroutine

END:
LUI  R4 END
ADDI R4 R4 END
JALR R0 R4
